cmake_minimum_required(VERSION 3.16)
project(db_query_call)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Windows 환경에서 Qt 경로 설정 (사용자 환경에 맞게 조정 필요)
# Qt Creator에서는 자동으로 설정될 수 있음
if(WIN32)
    # Qt 설치 경로를 여기에 지정 (필요한 경우)
    # set(CMAKE_PREFIX_PATH "C:/Qt/6.5.0/msvc2019_64")
endif()

# Qt 패키지 찾기
find_package(Qt6 REQUIRED COMPONENTS Core Widgets Network)
find_package(Qt6 QUIET COMPONENTS Mqtt)

if(NOT Qt6Mqtt_FOUND)
    message(STATUS "Qt6Mqtt not found in system, trying custom path...")
    
    # Windows에서 Qt Creator가 설치한 qtmqtt 경로 찾기
    if(WIN32)
        # Qt 설치 경로 찾기 (Qt 버전을 동적으로 찾음)
        file(GLOB QT_VERSIONS "C:/Qt/[0-9]*.[0-9]*.[0-9]*")
        if(QT_VERSIONS)
            # 가장 최신 버전 사용 (간단한 방법)
            list(GET QT_VERSIONS -1 QT_LATEST_VERSION)
            message(STATUS "Found Qt installation: ${QT_LATEST_VERSION}")
            
            # Qt 소스 디렉토리에서 qtmqtt 찾기
            find_path(QTMQTT_INCLUDE_DIR QtMqtt/QMqttClient
                PATHS "${QT_LATEST_VERSION}/Src/qtmqtt/include"
                      "${QT_LATEST_VERSION}/msvc2019_64/include"
                      "${QT_LATEST_VERSION}/mingw_64/include"
            )
            
            find_library(QTMQTT_LIBRARY Qt6Mqtt
                PATHS "${QT_LATEST_VERSION}/Src/qtmqtt/lib"
                      "${QT_LATEST_VERSION}/msvc2019_64/lib"
                      "${QT_LATEST_VERSION}/mingw_64/lib"
            )
        endif()
        
        # 백업 경로 - 사용자 정의 경로에서도 찾기
        if(NOT QTMQTT_INCLUDE_DIR OR NOT QTMQTT_LIBRARY)
            find_path(QTMQTT_INCLUDE_DIR QtMqtt/QMqttClient
                PATHS "C:/Qt/Src/qtmqtt/include"
                      "C:/dev/qtmqtt/build/include"
                      "$ENV{USERPROFILE}/dev/qtmqtt/build/include"
            )
            
            find_library(QTMQTT_LIBRARY Qt6Mqtt
                PATHS "C:/Qt/Src/qtmqtt/lib"
                      "C:/dev/qtmqtt/build/lib"
                      "$ENV{USERPROFILE}/dev/qtmqtt/build/lib"
            )
        endif()
    endif()
    
    if(QTMQTT_INCLUDE_DIR AND QTMQTT_LIBRARY)
        message(STATUS "Found custom Qt6Mqtt: ${QTMQTT_LIBRARY}")
        set(Qt6Mqtt_FOUND TRUE)
        # 커스텀 타겟 생성
        add_library(Qt6::Mqtt SHARED IMPORTED)
        set_target_properties(Qt6::Mqtt PROPERTIES
            IMPORTED_LOCATION "${QTMQTT_LIBRARY}"
            INTERFACE_INCLUDE_DIRECTORIES "${QTMQTT_INCLUDE_DIR}"
        )
    else()
        message(STATUS "QTMQTT_INCLUDE_DIR: ${QTMQTT_INCLUDE_DIR}")
        message(STATUS "QTMQTT_LIBRARY: ${QTMQTT_LIBRARY}")
        message(FATAL_ERROR "Qt6Mqtt not found. Please install Qt6Mqtt or build qtmqtt library.")
    endif()
endif()

# nlohmann/json 헤더 찾기 (Windows에서는 vcpkg 또는 수동 설치 필요)
find_path(NLOHMANN_JSON_INCLUDE_DIR nlohmann/json.hpp
    PATHS "C:/vcpkg/installed/x64-windows/include"
    "$ENV{USERPROFILE}/vcpkg/installed/x64-windows/include"
)

if(NOT NLOHMANN_JSON_INCLUDE_DIR)
    message(WARNING "nlohmann/json not found. Please install it via vcpkg or manually.")
endif()

# Qt 자동 MOC, UIC, RCC 활성화
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

set(SOURCES
    main.cpp
    remote_query_window.cpp
)

set(HEADERS
    remote_query_window.h
)

add_executable(db_query_call ${SOURCES} ${HEADERS})

target_link_libraries(db_query_call PRIVATE
    Qt6::Core 
    Qt6::Widgets
    Qt6::Network
    Qt6::Mqtt
)

if(NLOHMANN_JSON_INCLUDE_DIR)
    target_include_directories(db_query_call PRIVATE 
        ${NLOHMANN_JSON_INCLUDE_DIR}
    )
endif()

# Windows에서 실행 파일과 함께 DLL 복사 (선택 사항)
if(WIN32)
    # 빌드 후 필요한 Qt DLL 복사 (Qt Creator에서는 자동으로 처리될 수 있음)
    # add_custom_command(TARGET db_query_call POST_BUILD
    #     COMMAND ${CMAKE_COMMAND} -E copy_if_different
    #     $<TARGET_FILE:Qt6::Core> $<TARGET_FILE:Qt6::Widgets> $<TARGET_FILE:Qt6::Network> $<TARGET_FILE:Qt6::Mqtt>
    #     $<TARGET_FILE_DIR:db_query_call>
    # )
endif()